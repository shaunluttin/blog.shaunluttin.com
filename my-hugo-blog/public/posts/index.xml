<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Shaun Luttin, NrD</title>
    <link>http://shaunluttin.com/posts/</link>
    <description>Recent content in Posts on Shaun Luttin, NrD</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 06 Jan 2023 00:00:00 +0000</lastBuildDate><atom:link href="http://shaunluttin.com/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>.NET Command Line Cheatsheet</title>
      <link>http://shaunluttin.com/posts/dotnet-command-line-cheatsheet/</link>
      <pubDate>Fri, 06 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>http://shaunluttin.com/posts/dotnet-command-line-cheatsheet/</guid>
      <description>This presents an opinionated cheatsheet about how to use .NET from the command line.
.NET Core dotnet build dotnet test dotnet test --logger &amp;#34;console;verbosity=normal&amp;#34; --no-build dotnet test --filter PartialTestName .NET Framework (Legacy) dotnet msbuild dotnet vstest Extras Format new files with cshariper.
git diff develop --name-only --diff-filter=A -- *.cs | ForEach-Object { $files = @() } { $files += $_ } { dotnet csharpier $files } </description>
    </item>
    
    <item>
      <title>Reduce and/or aggregate in PowerShell</title>
      <link>http://shaunluttin.com/posts/powershell-aggregate-or-reduce/</link>
      <pubDate>Thu, 05 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>http://shaunluttin.com/posts/powershell-aggregate-or-reduce/</guid>
      <description>PowerShell&amp;rsquo;s built-in ForEach-Object provides a reduce/aggregate routine.
In short-form it looks like this to sum a range of numbers.
@(1, 2, 3) | ForEach-Object { $sum = 0; } { $sum += $_; } { $sum; } If we break it out with comments, we can see three blocks.
@(1, 2, 3, 4, 5) | ForEach-Object { # Begin. Here we set up the accumulator. $sum = 0; } { # Process.</description>
    </item>
    
    <item>
      <title>Set image metadata with exiftool</title>
      <link>http://shaunluttin.com/posts/set-image-metadata-with-exiftool/</link>
      <pubDate>Thu, 05 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>http://shaunluttin.com/posts/set-image-metadata-with-exiftool/</guid>
      <description>Install it from here https://exiftool.org/
Find available tag names here https://exiftool.org/TagNames/index.html
The following example sets the IPTC:Keywords attribute.
exiftool(-k).exe .\turtles-climbing-hills.png -IPTC:Keywords=&amp;#34;Absurd&amp;#34; </description>
    </item>
    
    <item>
      <title>Debug legacy .NET Framework with VS Code</title>
      <link>http://shaunluttin.com/posts/debug-dotnet-framework-with-vs-code/</link>
      <pubDate>Fri, 16 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>http://shaunluttin.com/posts/debug-dotnet-framework-with-vs-code/</guid>
      <description>Build your app with a portable Program Database (PDB) output.
msbuild ` /property:Configuration=Debug ` /property:Platform=x64 ` /property:DebugType=portable ` /t:Clean,Build ` /p:DeployOnBuild=true ` /p:WebPublishMethod=Package ` /p:PackageAsSingleFile=false ` C:\dev\MyApp In VSCode, Create ./.vscode/launch.config with this content.
{&amp;#34;version&amp;#34;: &amp;#34;0.2.0&amp;#34;,&amp;#34;configurations&amp;#34;: [{&amp;#34;name&amp;#34;: &amp;#34;.NET Attach&amp;#34;,&amp;#34;type&amp;#34;: &amp;#34;clr&amp;#34;,&amp;#34;request&amp;#34;: &amp;#34;attach&amp;#34;,&amp;#34;processId&amp;#34;: &amp;#34;${command:pickProcess}&amp;#34;}]} In VSCode,
Use &amp;lt;CTRL&amp;gt; + &amp;lt;SHIFT&amp;gt; + &amp;lt;P&amp;gt; to enter the command palette. Then choose Start Debugging. Then attach to your particular app.</description>
    </item>
    
    <item>
      <title>Sunset Existing Blogs</title>
      <link>http://shaunluttin.com/posts/sunset-existing-blogs/</link>
      <pubDate>Wed, 07 Dec 2022 19:47:08 -0800</pubDate>
      
      <guid>http://shaunluttin.com/posts/sunset-existing-blogs/</guid>
      <description>Archive Process
Download the sunsetted sites as static archives. Serve them through CloudFlare pages. Done!
Achived URLs:
https://bigfont.ca https://www.bigfont.ca https://blog.bigfont.ca https://muddlingthru.ca https://www.muddlingthru.ca https://muddlingthru.com https://www.muddlingthru.com We used https://www.httrack.com/ to perform the archiving. Other tools also exist.</description>
    </item>
    
    <item>
      <title>Rebuild my Blog in Hugo</title>
      <link>http://shaunluttin.com/posts/rebuild-my-blog-in-hugo/</link>
      <pubDate>Wed, 07 Dec 2022 19:44:31 -0800</pubDate>
      
      <guid>http://shaunluttin.com/posts/rebuild-my-blog-in-hugo/</guid>
      <description>Tasks Install Hugo by following the Quickstart. Done. Introduce scripts/ to build and start. Done. Philosophy Plain text provides portability. Automate all the things. Free costs less than paid. Make lots of ugly commits - expose the sausage making. </description>
    </item>
    
  </channel>
</rss>
